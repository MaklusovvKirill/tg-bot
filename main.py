import telebot
from telebot import types
import sqlite3
import datetime
import threading
import time
import os

# --- –ù–ê–°–¢–†–û–ô–ö–ò ---
BOT_TOKEN = "8136190646:AAFsj8cIZ2pGOzWkUWO2IW63aLutko2pHFE"  # –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –í–ê–® –¢–û–ö–ï–ù
DATABASE_NAME = 'reminders_bot.db'
TELEGRAPH_DOCUMENTATION_URL = 'https://telegra.ph/Tut-mogla-byt-vasha-dokumenta-05-13' # –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –í–ê–®–£ –°–°–´–õ–ö–£

# --- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–û–¢–ê ---
bot = telebot.TeleBot(BOT_TOKEN)

# --- –£–ü–†–ê–í–õ–ï–ù–ò–ï –ë–ê–ó–û–ô –î–ê–ù–ù–´–• ---
def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."""
    conn = sqlite3.connect(DATABASE_NAME, check_same_thread=False)
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS reminders (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            creator_id INTEGER NOT NULL,  -- ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–æ–∑–¥–∞–≤—à–µ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
            target_chat_id INTEGER NOT NULL, -- ID —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (–ª–∏—á–Ω—ã–π –∏–ª–∏ –∫–∞–Ω–∞–ª)
            target_type TEXT NOT NULL, -- 'user' –∏–ª–∏ 'channel'
            reminder_datetime TEXT NOT NULL,
            text TEXT NOT NULL,
            photo_id TEXT,
            is_sent INTEGER DEFAULT 0
        )
    ''')
    conn.commit()
    conn.close()

def add_reminder_to_db(creator_id, target_chat_id, target_type, reminder_datetime, text, photo_id=None):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
    conn = sqlite3.connect(DATABASE_NAME, check_same_thread=False)
    cursor = conn.cursor()
    try:
        cursor.execute('''
            INSERT INTO reminders (creator_id, target_chat_id, target_type, reminder_datetime, text, photo_id)
            VALUES (?, ?, ?, ?, ?, ?)
        ''', (creator_id, target_chat_id, target_type, reminder_datetime.strftime('%Y-%m-%d %H:%M:%S'), text, photo_id))
        conn.commit()
    except sqlite3.Error as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –ë–î: {e}")
    finally:
        conn.close()

def get_user_reminders(creator_id, include_sent=False):
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, –∏–∑ –ë–î."""
    conn = sqlite3.connect(DATABASE_NAME, check_same_thread=False)
    cursor = conn.cursor()
    try:
        query = '''
            SELECT id, target_chat_id, target_type, reminder_datetime, text, photo_id, is_sent FROM reminders
            WHERE creator_id = ?
        '''
        params = [creator_id]
        if not include_sent:
            query += ' AND is_sent = 0'
        query += ' ORDER BY reminder_datetime ASC'

        cursor.execute(query, tuple(params))
        reminders = cursor.fetchall()
        return reminders
    except sqlite3.Error as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏–∑ –ë–î: {e}")
        return []
    finally:
        conn.close()

def get_nearest_personal_reminder(creator_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –±–ª–∏–∂–∞–π—à–µ–µ –∞–∫—Ç–∏–≤–Ω–æ–µ –õ–ò–ß–ù–û–ï –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    conn = sqlite3.connect(DATABASE_NAME, check_same_thread=False)
    cursor = conn.cursor()
    try:
        now_str = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        cursor.execute('''
            SELECT id, reminder_datetime, text, photo_id FROM reminders
            WHERE creator_id = ? AND target_type = 'user' AND is_sent = 0 AND reminder_datetime > ?
            ORDER BY reminder_datetime ASC LIMIT 1
        ''', (creator_id, now_str))
        reminder = cursor.fetchone()
        return reminder
    except sqlite3.Error as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–ª–∏–∂–∞–π—à–µ–≥–æ –ª–∏—á–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
        return None
    finally:
        conn.close()

def mark_reminder_as_sent(reminder_id):
    """–ü–æ–º–µ—á–∞–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ."""
    conn = sqlite3.connect(DATABASE_NAME, check_same_thread=False)
    cursor = conn.cursor()
    try:
        cursor.execute('''
            UPDATE reminders SET is_sent = 1 WHERE id = ?
        ''', (reminder_id,))
        conn.commit()
    except sqlite3.Error as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
    finally:
        conn.close()

# --- –û–°–ù–û–í–ù–´–ï –ö–ù–û–ü–ö–ò –ú–ï–ù–Æ ---
def get_main_keyboard():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ª–∏—á–Ω–æ–≥–æ —á–∞—Ç–∞."""
    markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    btn_docs = types.KeyboardButton("üìñ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è")
    btn_new_reminder = types.KeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫—É")
    btn_all_reminders = types.KeyboardButton("üìã –í—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∏")
    markup.add(btn_new_reminder, btn_all_reminders, btn_docs)
    return markup

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î –ò –°–û–û–ë–©–ï–ù–ò–ô ---

@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    if message.chat.type == "private":
        user_name = message.from_user.first_name
        welcome_text = (
            f"–ü—Ä–∏–≤–µ—Ç, {user_name}!\n\n"
            "–Ø —Ç–≤–æ–π –±–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π. "
            "–¢—ã –º–æ–∂–µ—à—å —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è —Å–µ–±—è –∏–ª–∏ –¥–ª—è –∫–∞–Ω–∞–ª–æ–≤, –≥–¥–µ —Ç—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.\n\n"
            "–ï—Å–ª–∏ –º–µ–Ω—è —É–ø–æ–º—è–Ω—É—Ç—å –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ, "
            "—è –ø–æ–∫–∞–∂—É —Ç–≤–æ–µ –±–ª–∏–∂–∞–π—à–µ–µ –∞–∫—Ç–∏–≤–Ω–æ–µ –õ–ò–ß–ù–û–ï –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ."
        )
        bot.send_message(message.chat.id, welcome_text, reply_markup=get_main_keyboard())
    else:
        bot.reply_to(message, "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")

@bot.message_handler(func=lambda message: message.chat.type == "private" and message.text == "üìñ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è")
def show_documentation(message):
    bot.send_message(message.chat.id,
                     f"–ü–æ–ª–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –ø–æ —Ä–∞–±–æ—Ç–µ —Å –±–æ—Ç–æ–º –¥–æ—Å—Ç—É–ø–Ω–∞ –∑–¥–µ—Å—å: {TELEGRAPH_DOCUMENTATION_URL}",
                     reply_markup=get_main_keyboard())

user_data = {} # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è

@bot.message_handler(func=lambda message: message.chat.type == "private" and message.text == "‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫—É")
def create_new_reminder_start(message):
    user_id = message.from_user.id
    user_data[user_id] = {'creator_id': user_id} # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞—Ç–µ–ª—è
    msg = bot.send_message(message.chat.id,
                           "–•–æ—Ä–æ—à–æ! –î–∞–≤–∞–π —Å–æ–∑–¥–∞–¥–∏–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ.\n\n"
                           "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –¥–∞—Ç—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2025-12-31):",
                           reply_markup=types.ReplyKeyboardRemove())
    bot.register_next_step_handler(msg, process_date_step)

def process_date_step(message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    try:
        date_str = message.text
        datetime.datetime.strptime(date_str, '%Y-%m-%d')
        user_data[user_id]['date'] = date_str
        msg = bot.send_message(chat_id,
                               "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:30):")
        bot.register_next_step_handler(msg, process_time_step)
    except ValueError:
        msg = bot.send_message(chat_id,
                               "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2025-07-15):")
        bot.register_next_step_handler(msg, process_date_step)
    except Exception as e:
        bot.send_message(chat_id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞.", reply_markup=get_main_keyboard())
        if user_id in user_data: del user_data[user_id]

def process_time_step(message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    try:
        time_str = message.text
        datetime.datetime.strptime(time_str, '%H:%M')
        user_data[user_id]['time'] = time_str

        reminder_dt_str = f"{user_data[user_id]['date']} {user_data[user_id]['time']}"
        reminder_dt = datetime.datetime.strptime(reminder_dt_str, '%Y-%m-%d %H:%M')

        if reminder_dt < datetime.datetime.now():
            msg = bot.send_message(chat_id,
                                   "–≠—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –±—É–¥—É—â—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è.\n"
                                   "–ù–∞—á–Ω–µ–º —Å–Ω–∞—á–∞–ª–∞ —Å –¥–∞—Ç—ã (–ì–ì–ì–ì-–ú–ú-–î–î):")
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è, –Ω–æ –Ω–µ creator_id
            if 'date' in user_data[user_id]: del user_data[user_id]['date']
            if 'time' in user_data[user_id]: del user_data[user_id]['time']
            bot.register_next_step_handler(msg, process_date_step)
            return

        msg = bot.send_message(chat_id,
                               "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:")
        bot.register_next_step_handler(msg, process_text_step)
    except ValueError:
        msg = bot.send_message(chat_id,
                               "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:00):")
        bot.register_next_step_handler(msg, process_time_step)
    except Exception as e:
        bot.send_message(chat_id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞.", reply_markup=get_main_keyboard())
        if user_id in user_data: del user_data[user_id]

def process_text_step(message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    try:
        text = message.text
        if not text:
            msg = bot.send_message(chat_id, "–¢–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç:")
            bot.register_next_step_handler(msg, process_text_step)
            return

        user_data[user_id]['text'] = text

        markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True, one_time_keyboard=True)
        btn_yes = types.KeyboardButton("–î–∞, —Å —Ñ–æ—Ç–æ")
        btn_no = types.KeyboardButton("–ù–µ—Ç, –±–µ–∑ —Ñ–æ—Ç–æ")
        markup.add(btn_yes, btn_no)
        msg = bot.send_message(chat_id, "–•–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—é?", reply_markup=markup)
        bot.register_next_step_handler(msg, process_photo_choice_step)
    except Exception as e:
        bot.send_message(chat_id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞.", reply_markup=get_main_keyboard())
        if user_id in user_data: del user_data[user_id]

def process_photo_choice_step(message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    try:
        choice = message.text.lower()
        if "–¥–∞" in choice:
            msg = bot.send_message(chat_id, "–û—Ç–ª–∏—á–Ω–æ! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ.", reply_markup=types.ReplyKeyboardRemove())
            bot.register_next_step_handler(msg, process_photo_step)
        elif "–Ω–µ—Ç" in choice:
            user_data[user_id]['photo_id'] = None
            ask_target_type(message) # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
        else:
            markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True, one_time_keyboard=True)
            btn_yes = types.KeyboardButton("–î–∞, —Å —Ñ–æ—Ç–æ")
            btn_no = types.KeyboardButton("–ù–µ—Ç, –±–µ–∑ —Ñ–æ—Ç–æ")
            markup.add(btn_yes, btn_no)
            msg = bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ '–î–∞, —Å —Ñ–æ—Ç–æ' –∏–ª–∏ '–ù–µ—Ç, –±–µ–∑ —Ñ–æ—Ç–æ'.", reply_markup=markup)
            bot.register_next_step_handler(msg, process_photo_choice_step)
    except Exception as e:
        bot.send_message(chat_id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞.", reply_markup=get_main_keyboard())
        if user_id in user_data: del user_data[user_id]

def process_photo_step(message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    try:
        if message.content_type == 'photo':
            photo_id = message.photo[-1].file_id
            user_data[user_id]['photo_id'] = photo_id
            ask_target_type(message) # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
        else:
            msg = bot.send_message(chat_id, "–≠—Ç–æ –Ω–µ —Ñ–æ—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ /skip_photo, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª (–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±—É–¥–µ—Ç –±–µ–∑ —Ñ–æ—Ç–æ).")
            bot.register_next_step_handler(msg, process_photo_step_skip_handler) # –ù—É–∂–µ–Ω –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è /skip_photo
    except Exception as e:
        bot.send_message(chat_id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ: {e}. –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–æ –±–µ–∑ —Ñ–æ—Ç–æ.", reply_markup=get_main_keyboard())
        user_data[user_id]['photo_id'] = None
        ask_target_type(message) # –í—Å–µ —Ä–∞–≤–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É

def process_photo_step_skip_handler(message): # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è /skip_photo –∏–ª–∏ –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ç–æ
    if message.text and message.text.lower() == '/skip_photo':
        user_data[message.from_user.id]['photo_id'] = None
        ask_target_type(message)
    elif message.content_type == 'photo':
        process_photo_step(message) # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ —Ñ–æ—Ç–æ
    else:
        msg = bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ /skip_photo.")
        bot.register_next_step_handler(msg, process_photo_step_skip_handler)

def ask_target_type(message):
    """–°–ø—Ä–∞—à–∏–≤–∞–µ—Ç, –∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ."""
    user_id = message.from_user.id
    chat_id = message.chat.id
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True, one_time_keyboard=True)
    btn_personal = types.KeyboardButton("–õ–∏—á–Ω–æ –º–Ω–µ")
    btn_channel = types.KeyboardButton("–í –∫–∞–Ω–∞–ª")
    markup.add(btn_personal, btn_channel)
    msg = bot.send_message(chat_id, "–ö—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —ç—Ç–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ?", reply_markup=markup)
    bot.register_next_step_handler(msg, process_target_type_choice)

def process_target_type_choice(message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    try:
        choice = message.text
        if choice == "–õ–∏—á–Ω–æ –º–Ω–µ":
            user_data[user_id]['target_type'] = 'user'
            user_data[user_id]['target_chat_id'] = user_id # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–∑–¥–∞—Ç–µ–ª—é –≤ –ª–∏—á–∫—É
            save_reminder(user_id, chat_id)
        elif choice == "–í –∫–∞–Ω–∞–ª":
            user_data[user_id]['target_type'] = 'channel'
            msg = bot.send_message(chat_id,
                                   "–•–æ—Ä–æ—à–æ. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ ID –∫–∞–Ω–∞–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, `@my_channel` –∏–ª–∏ `-1001234567890`).\n"
                                   "–£–±–µ–¥–∏—Å—å, —á—Ç–æ —è –¥–æ–±–∞–≤–ª–µ–Ω –≤ —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª –∏ —Ç—ã —è–≤–ª—è–µ—à—å—Å—è –µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
                                   reply_markup=types.ReplyKeyboardRemove())
            bot.register_next_step_handler(msg, process_channel_id_step)
        else:
            markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True, one_time_keyboard=True)
            btn_personal = types.KeyboardButton("–õ–∏—á–Ω–æ –º–Ω–µ")
            btn_channel = types.KeyboardButton("–í –∫–∞–Ω–∞–ª")
            markup.add(btn_personal, btn_channel)
            msg = bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ '–õ–∏—á–Ω–æ –º–Ω–µ' –∏–ª–∏ '–í –∫–∞–Ω–∞–ª'.", reply_markup=markup)
            bot.register_next_step_handler(msg, process_target_type_choice)
    except Exception as e:
        bot.send_message(chat_id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞.", reply_markup=get_main_keyboard())
        if user_id in user_data: del user_data[user_id]

def process_channel_id_step(message):
    user_id = message.from_user.id # –≠—Ç–æ creator_id
    chat_id = message.chat.id # –≠—Ç–æ –ª–∏—á–Ω—ã–π —á–∞—Ç —Å –±–æ—Ç–æ–º
    channel_input = message.text

    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –µ–≥–æ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏ –ø—Ä–∞–≤–∞ –±–æ—Ç–∞
        # channel_input –º–æ–∂–µ—Ç –±—ã—Ç—å @username –∏–ª–∏ —á–∏—Å–ª–æ–≤—ã–º ID
        target_channel_info = bot.get_chat(channel_input)
        target_channel_id = target_channel_info.id
        user_data[user_id]['target_chat_id'] = target_channel_id

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–∑–¥–∞—Ç–µ–ª—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞
        member = bot.get_chat_member(target_channel_id, user_id)
        if member.status not in ['administrator', 'creator']:
            bot.send_message(chat_id,
                             "–û—à–∏–±–∫–∞: –¢—ã –Ω–µ —è–≤–ª—è–µ—à—å—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –∫–∞–Ω–∞–ª–µ. "
                             "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω–æ –¥–ª—è —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –¥—Ä—É–≥–æ–π –∫–∞–Ω–∞–ª.",
                             reply_markup=get_main_keyboard())
            if user_id in user_data: del user_data[user_id]
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ –±–æ—Ç –≤ –∫–∞–Ω–∞–ª–µ (get_chat_member –¥–ª—è –±–æ—Ç–∞)
        bot_member = bot.get_chat_member(target_channel_id, bot.get_me().id)
        if not bot_member or bot_member.status == 'left' or bot_member.status == 'kicked':
             bot.send_message(chat_id,
                             f"–û—à–∏–±–∫–∞: –ú–µ–Ω—è –Ω–µ—Ç –≤ –∫–∞–Ω–∞–ª–µ {channel_input} –∏–ª–∏ —É –º–µ–Ω—è –Ω–µ—Ç –ø—Ä–∞–≤. "
                             "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å –º–µ–Ω—è –≤ –∫–∞–Ω–∞–ª. –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ —Å–æ–∑–¥–∞–Ω–æ.",
                             reply_markup=get_main_keyboard())
             if user_id in user_data: del user_data[user_id]
             return


        save_reminder(user_id, chat_id) # chat_id –∑–¥–µ—Å—å - —ç—Ç–æ –ª–∏—á–Ω—ã–π —á–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≥–¥–µ –æ–Ω —Å–æ–∑–¥–∞–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ

    except telebot.apihelper.ApiTelegramException as e:
        if "chat not found" in str(e).lower():
            msg = bot.send_message(chat_id,
                                   f"–ö–∞–Ω–∞–ª '{channel_input}' –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. "
                                   "–£–±–µ–¥–∏—Å—å, —á—Ç–æ ID –∏–ª–∏ username –≤–µ—Ä–Ω—ã –∏ —è –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑:")
            bot.register_next_step_handler(msg, process_channel_id_step)
        else:
            bot.send_message(chat_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–∞–Ω–∞–ª–∞: {e}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=get_main_keyboard())
            if user_id in user_data: del user_data[user_id]
    except Exception as e:
        bot.send_message(chat_id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞.", reply_markup=get_main_keyboard())
        if user_id in user_data: del user_data[user_id]


def save_reminder(user_id, original_chat_id): # original_chat_id - —ç—Ç–æ ID –ª–∏—á–Ω–æ–≥–æ —á–∞—Ç–∞ —Å –±–æ—Ç–æ–º
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ –ë–î –∏ –æ–ø–æ–≤–µ—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        data = user_data.get(user_id)
        if not data or not all(k in data for k in ['creator_id', 'date', 'time', 'text', 'target_type', 'target_chat_id']):
            bot.send_message(original_chat_id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ —Å–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ.", reply_markup=get_main_keyboard())
            if user_id in user_data: del user_data[user_id]
            return

        reminder_datetime_str = f"{data['date']} {data['time']}"
        reminder_datetime_obj = datetime.datetime.strptime(reminder_datetime_str, '%Y-%m-%d %H:%M')

        add_reminder_to_db(
            data['creator_id'],
            data['target_chat_id'],
            data['target_type'],
            reminder_datetime_obj,
            data['text'],
            data.get('photo_id')
        )

        target_description = "–ª–∏—á–Ω–æ —Ç–µ–±–µ" if data['target_type'] == 'user' else f"–≤ –∫–∞–Ω–∞–ª {data['target_chat_id']}"
        if data['target_type'] == 'channel':
            try:
                # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–º—è –∫–∞–Ω–∞–ª–∞ –¥–ª—è –±–æ–ª–µ–µ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                channel_info = bot.get_chat(data['target_chat_id'])
                target_description = f"–≤ –∫–∞–Ω–∞–ª '{channel_info.title or channel_info.username}' ({data['target_chat_id']})"
            except:
                pass # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –æ—Å—Ç–∞–≤–∏–º ID

        bot.send_message(original_chat_id, # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤ –ª–∏—á–Ω—ã–π —á–∞—Ç
                         f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!\n"
                         f"–ë—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {target_description}\n"
                         f"–î–∞—Ç–∞: {data['date']}\n"
                         f"–í—Ä–µ–º—è: {data['time']}\n"
                         f"–¢–µ–∫—Å—Ç: {data['text']}\n"
                         f"{'–§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ.' if data.get('photo_id') else '–ë–µ–∑ —Ñ–æ—Ç–æ.'}",
                         reply_markup=get_main_keyboard())
    except ValueError:
        bot.send_message(original_chat_id, "–û—à–∏–±–∫–∞ –≤ –¥–∞—Ç–µ –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞–Ω–æ–≤–æ.", reply_markup=get_main_keyboard())
    except Exception as e:
        bot.send_message(original_chat_id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=get_main_keyboard())
    finally:
        if user_id in user_data:
            del user_data[user_id]


@bot.message_handler(func=lambda message: message.chat.type == "private" and message.text == "üìã –í—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∏")
def show_all_reminders(message):
    user_id = message.from_user.id
    reminders = get_user_reminders(user_id, include_sent=False)

    if not reminders:
        bot.send_message(message.chat.id, "–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.", reply_markup=get_main_keyboard())
        return

    response_text = "–¢–≤–æ–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n\n"
    for i, reminder in enumerate(reminders):
        r_id, r_target_chat_id, r_target_type, r_dt_str, r_text, r_photo_id, r_is_sent = reminder
        try:
            r_dt_obj = datetime.datetime.strptime(r_dt_str, '%Y-%m-%d %H:%M:%S')
            formatted_dt = r_dt_obj.strftime('%d.%m.%Y –≤ %H:%M')
        except ValueError:
            formatted_dt = r_dt_str

        target_desc = "–¢–µ–±–µ" if r_target_type == 'user' else f"–í –∫–∞–Ω–∞–ª ({r_target_chat_id})"
        if r_target_type == 'channel':
             try:
                channel_info = bot.get_chat(r_target_chat_id)
                target_desc = f"–í –∫–∞–Ω–∞–ª '{channel_info.title or channel_info.username}'"
             except:
                pass


        response_text += (
            f"{i+1}. –ö—É–¥–∞: {target_desc}\n"
            f"   –î–∞—Ç–∞: {formatted_dt}\n"
            f"   –¢–µ–∫—Å—Ç: {r_text}\n"
            f"{'   (—Å —Ñ–æ—Ç–æ)' if r_photo_id else ''}\n\n"
        )
        if len(response_text) > 3500:
            bot.send_message(message.chat.id, response_text, reply_markup=get_main_keyboard())
            response_text = ""

    if response_text:
        bot.send_message(message.chat.id, response_text, reply_markup=get_main_keyboard())


@bot.message_handler(func=lambda message: True, content_types=['text'])
def handle_mention(message):
    if message.chat.type in ["group", "supergroup"]:
        bot_username = bot.get_me().username
        mentioned = False
        if message.text and f"@{bot_username}" in message.text:
            mentioned = True
        if not mentioned and message.entities:
            for entity in message.entities:
                if entity.type == "mention":
                    mention_text = message.text[entity.offset : entity.offset + entity.length]
                    if mention_text == f"@{bot_username}":
                        mentioned = True
                        break
        
        if mentioned:
            user_id = message.from_user.id # ID —Ç–æ–≥–æ, –∫—Ç–æ —É–ø–æ–º—è–Ω—É–ª
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –±–ª–∏–∂–∞–π—à–µ–µ –õ–ò–ß–ù–û–ï –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
            reminder_tuple = get_nearest_personal_reminder(user_id)
            if reminder_tuple:
                r_id, r_dt_str, r_text, r_photo_id = reminder_tuple
                try:
                    r_dt_obj = datetime.datetime.strptime(r_dt_str, '%Y-%m-%d %H:%M:%S')
                    formatted_dt = r_dt_obj.strftime('%d.%m.%Y –≤ %H:%M')
                except ValueError:
                    formatted_dt = r_dt_str

                reply_text = (
                    f"@{message.from_user.username}, —Ç–≤–æ–µ –±–ª–∏–∂–∞–π—à–µ–µ –ª–∏—á–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:\n"
                    f"üìÖ {formatted_dt}\n"
                    f"üìù {r_text}"
                )
                if r_photo_id:
                    try:
                        bot.send_photo(message.chat.id, r_photo_id, caption=reply_text, reply_to_message_id=message.message_id)
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –≤ –≥—Ä—É–ø–ø–µ (—É–ø–æ–º–∏–Ω–∞–Ω–∏–µ): {e}")
                        bot.reply_to(message, reply_text + "\n(–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ)")
                else:
                    bot.reply_to(message, reply_text)
            else:
                bot.reply_to(message, f"@{message.from_user.username}, —É —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –ª–∏—á–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.")


# --- –§–û–ù–û–í–´–ô –ü–†–û–¶–ï–°–° –ü–†–û–í–ï–†–ö–ò –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ô ---
def reminder_checker():
    print("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∑–∞–ø—É—â–µ–Ω–∞...")
    while True:
        conn = sqlite3.connect(DATABASE_NAME, check_same_thread=False)
        cursor = conn.cursor()
        now = datetime.datetime.now()
        now_str = now.strftime('%Y-%m-%d %H:%M:%S')

        try:
            cursor.execute('''
                SELECT id, creator_id, target_chat_id, target_type, reminder_datetime, text, photo_id FROM reminders
                WHERE reminder_datetime <= ? AND is_sent = 0
            ''', (now_str,))
            due_reminders = cursor.fetchall()

            for reminder_data in due_reminders:
                r_id, creator_id, target_chat_id, target_type, r_dt_str, text, photo_id = reminder_data
                
                reminder_dt_obj = datetime.datetime.strptime(r_dt_str, '%Y-%m-%d %H:%M:%S')
                if now - reminder_dt_obj > datetime.timedelta(days=1):
                    print(f"–ü—Ä–æ–ø—É—â–µ–Ω–æ —Å—Ç–∞—Ä–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ID {r_id} –¥–ª—è {target_type} {target_chat_id}")
                    mark_reminder_as_sent(r_id)
                    continue

                message_text = text # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–µ–∫—Å—Ç –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞ "–ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ï"
                if target_type == 'user':
                    message_text = f"üîî –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ï üîî\n\n{text}" # –î–ª—è –ª–∏—á–Ω—ã—Ö –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å

                try:
                    if photo_id:
                        bot.send_photo(target_chat_id, photo_id, caption=message_text)
                    else:
                        bot.send_message(target_chat_id, message_text)
                    
                    mark_reminder_as_sent(r_id)
                    print(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ID {r_id} –≤ {target_type} {target_chat_id}")
                except telebot.apihelper.ApiTelegramException as e:
                    print(f"–û—à–∏–±–∫–∞ API Telegram –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ID {r_id} –≤ {target_chat_id}: {e}")
                    error_str = str(e).lower()
                    if "bot was blocked by the user" in error_str or \
                       "chat not found" in error_str or \
                       "user is deactivated" in error_str or \
                       "bot is not a member of the channel" in error_str or \
                       "bot can't initiate conversation with a user" in error_str or \
                       "need administrator rights in the channel" in error_str or \
                       "group chat was deactivated" in error_str or \
                       "bot was kicked from the channel" in error_str or \
                       "bot was kicked from the supergroup" in error_str or \
                       "chat_admin_required" in error_str: # –û–±—â–µ–µ –ø—Ä–∞–≤–æ
                        mark_reminder_as_sent(r_id)
                        print(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ID {r_id} –ø–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ —á–∞—Ç—É/–∫–∞–Ω–∞–ª—É: {target_chat_id}")
                except Exception as e:
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ID {r_id} –≤ {target_chat_id}: {e}")
        except sqlite3.Error as e:
            print(f"–û—à–∏–±–∫–∞ –ë–î –≤ reminder_checker: {e}")
        finally:
            conn.close()
        
        time.sleep(20) # –£–º–µ–Ω—å—à–∏–ª –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –±–æ–ª–µ–µ –±—ã—Å—Ç—Ä–æ–≥–æ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è, –º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å –Ω–∞ 30

# --- –ó–ê–ü–£–°–ö –ë–û–¢–ê ---
if __name__ == '__main__':
    print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    init_db() # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–∑–≤–∞–Ω–∞ –î–û –ø–µ—Ä–≤–æ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –ë–î
    print("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")

    checker_thread = threading.Thread(target=reminder_checker, daemon=True)
    checker_thread.start()

    print("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    try:
        bot.polling(none_stop=True, interval=0)
    except Exception as e:
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –±–æ—Ç–∞: {e}")
    finally:
        print("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
